因为咱们学校的服务器是内部的没有域名，也就没有父子域名的关系，所以我之前说的设置域setDomain是不可行的
理论上两个IP地址不同的服务器无法互相访问对方的cookie，但是可以让生成cookie的服务器留出一个接口
假如a服务器生成cookie保存在用户电脑上，服务器b想要读取服务器a保存的cookie上的数据内容
如果直接让b去读cookie是读不到的
但是可以让b去访问一个a留出来的接口，这个接口会去以a服务器的名义读取cookie内容，然后返回给b
也就是b"伪装"成是a要读取cookie骗过浏览器，但实际上读取的cookie被发送到了b服务器
然后b就可以处理读取到的cookie，执行广告推送算法
具体看下面我和chatgpt的对话，尤其看最后有个流程图

更新
因为要读取批量cookie，所以更换了一种形式，之前那个暂且作废
详情看下面对话
我自己那部分目前已经跑通



下面是关于
下面是使用 StringBuilder 手动构建 JSON 数据的详细方案。我们让 服务器 A 将所有 Cookie 信息打包为一个 JSON 数据，并让 服务器 B 调用它并解析。

服务器 A：打包 Cookie 并返回 JSON 数据
服务器 A 的 /getCookiesAsArray 接口通过 HTTP 响应返回 JSON 数据，其中包含所有 Cookie 的 name 和 value 信息。

示例代码
java
复制代码
@WebServlet("/getCookiesAsArray")
public class GetCookiesAsArrayServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        // 获取请求中的 Cookie
        Cookie[] cookies = request.getCookies();

        // 使用 StringBuilder 构建 JSON 数据
        StringBuilder jsonBuilder = new StringBuilder();
        jsonBuilder.append("["); // JSON 数组起始

        if (cookies != null) {
            for (int i = 0; i < cookies.length; i++) {
                Cookie cookie = cookies[i];

                // 添加 Cookie 的 JSON 对象
                jsonBuilder.append("{");
                jsonBuilder.append("\"name\":\"").append(cookie.getName()).append("\",");
                jsonBuilder.append("\"value\":\"").append(cookie.getValue()).append("\"");
                jsonBuilder.append("}");

                // 如果不是最后一个 Cookie，添加逗号
                if (i < cookies.length - 1) {
                    jsonBuilder.append(",");
                }
            }
        }

        jsonBuilder.append("]"); // JSON 数组结束

        // 设置响应内容类型为 JSON
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        // 将 JSON 数据返回给客户端
        response.getWriter().write(jsonBuilder.toString());
    }
}
服务器 B：调用服务器 A 接口并解析 JSON 数据
服务器 B 的 /fetchCookiesFromA 接口通过 HTTP 请求调用服务器 A 的 /getCookiesAsArray，接收并解析 JSON 数据。

示例代码
java
复制代码
@WebServlet("/fetchCookiesFromA")
public class FetchCookiesFromAServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        // 调用服务器 A 的接口
        String serverAUrl = "http://10.100.164.46/getCookiesAsArray";
        URL url = new URL(serverAUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("Accept", "application/json");

        // 获取服务器 A 的响应
        StringBuilder jsonResponse = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                jsonResponse.append(line);
            }
        }

        // 打印服务器 A 的 JSON 响应
        System.out.println("Received JSON: " + jsonResponse);

        // 简单解析 JSON 数据（手动解析）
        String jsonString = jsonResponse.toString();
        jsonString = jsonString.substring(1, jsonString.length() - 1); // 去掉数组的 [ 和 ]
        String[] cookies = jsonString.split("\\},\\{"); // 按 Cookie 对象分割

        for (String cookieData : cookies) {
            // 去掉 JSON 对象的 { } 和末尾的引号
            cookieData = cookieData.replace("{", "").replace("}", "").replace("\"", "");
            String[] keyValuePairs = cookieData.split(","); // 按属性分割

            String name = keyValuePairs[0].split(":")[1]; // 提取 name 值
            String value = keyValuePairs[1].split(":")[1]; // 提取 value 值

            System.out.println("Cookie Name: " + name + ", Value: " + value);
        }

        // 返回消息给客户端
        response.setContentType("text/plain");
        response.getWriter().write("Cookies received and processed.");
    }
}
流程说明
服务器 A：

接收客户端的请求。
获取请求中的所有 Cookie。
使用 StringBuilder 构建 JSON 数据，将 Cookie 以数组形式组织：
json
复制代码
[
    {"name": "session_id", "value": "abc123"},
    {"name": "user_preference", "value": "dark_mode"}
]
返回 JSON 数据作为响应。
服务器 B：

向服务器 A 的接口发送请求。
接收 JSON 数据并解析（通过手动字符串操作解析 JSON 数组）。
将解析的 Cookie 数据打印或进一步处理。
示例 JSON 数据
当服务器 A 返回以下 JSON 数据：

json
复制代码
[
    {"name": "session_id", "value": "abc123"},
    {"name": "user_preference", "value": "dark_mode"}
]
服务器 B 的日志输出会是：

css
复制代码
Received JSON: [{"name":"session_id","value":"abc123"},{"name":"user_preference","value":"dark_mode"}]
Cookie Name: session_id, Value: abc123
Cookie Name: user_preference, Value: dark_mode
注意事项
手动解析 JSON：

使用 StringBuilder 和字符串操作拼接/解析 JSON 适合轻量级场景，但对于复杂 JSON 数据，推荐引入 JSON 解析库（如 org.json 或 Gson）。
安全性：

确保服务器 A 的接口仅被授权的服务器 B 调用，避免数据泄露。
字符转义：

如果 Cookie 的 name 或 value 包含特殊字符（如 "），需要进行转义处理，防止破坏 JSON 格式。
性能：

StringBuilder 性能较高，但对于大量数据或复杂结构，JSON 库更具优势。
通过这种方法，既可以避免引入外部库，又能高效地在服务器之间传递 Cookie 数据。





